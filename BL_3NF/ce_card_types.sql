BEGIN;
CREATE SCHEMA IF NOT EXISTS BL_3NF;
CREATE SCHEMA IF NOT EXISTS BL_CL;

DROP TABLE IF EXISTS BL_3NF.CE_CARD_TYPES;
CREATE TABLE IF NOT EXISTS BL_3NF.CE_CARD_TYPES
(
    CARD_TYPE_ID        BIGINT,
    CARD_TYPE_SRC_ID    VARCHAR(255)    NOT NULL,
    CARD_TYPE_NAME      VARCHAR(50)     NOT NULL,
    VERIFICATION_METHOD VARCHAR(50)     NOT NULL,
    SOURCE_SYSTEM       VARCHAR(255)    NOT NULL,
    SOURCE_ENTITY       VARCHAR(255)    NOT NULL,
    INSERT_DT           TIMESTAMP       NOT NULL,
    UPDATE_DT           TIMESTAMP       NOT NULL,
    CONSTRAINT          PK_CE_CARD_TYPES_CARD_TYPE_ID PRIMARY KEY (CARD_TYPE_ID),
    CONSTRAINT          UNQ_CE_CARD_TYPES_CARD_TYPE_SRC_ID UNIQUE (CARD_TYPE_SRC_ID)
);

DROP SEQUENCE IF EXISTS BL_3NF.SEQ_CARD_TYPE_ID;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_CARD_TYPE_ID START WITH 1 INCREMENT BY 1;

DROP PROCEDURE IF EXISTS BL_CL.SP_3NF_LOAD_CE_CARD_TYPES_DEFAULT;
CREATE OR REPLACE PROCEDURE BL_CL.SP_3NF_LOAD_CE_CARD_TYPES_DEFAULT()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_AFFECTED BIGINT;
BEGIN
    INSERT INTO BL_3NF.CE_CARD_TYPES (CARD_TYPE_ID, CARD_TYPE_SRC_ID, CARD_TYPE_NAME, VERIFICATION_METHOD, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
    VALUES      (-1,
                'N/A',
                'N/A',
                'N/A',
                'MANUAL',
                'MANUAL',
                '1900-01-01 00:00:00',
                '1900-01-01 00:00:00')
    ON CONFLICT (CARD_TYPE_ID) DO NOTHING;
    
    GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_CARD_TYPES_DEFAULT', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', 1, V_AFFECTED, 0, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_CARD_TYPES_DEFAULT', 'BL_CL', 'ERROR LOADING CE_CARD_TYPES', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING CE_CARD_TYPES (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;

DROP FUNCTION IF EXISTS BL_CL.FN_3NF_TRANSFORM_CARD_TYPES;
CREATE OR REPLACE FUNCTION BL_CL.FN_3NF_TRANSFORM_CARD_TYPES()
RETURNS TABLE
(
    CARD_TYPE_ID        VARCHAR(255),
    CARD_TYPE_NAME      VARCHAR(50),
    VERIFICATION_METHOD VARCHAR(50),
    SOURCE_SYSTEM       VARCHAR(255),
    SOURCE_ENTITY       VARCHAR(255)
)
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_LAST_LOAD_DT TIMESTAMP;
BEGIN
    SELECT  LAST_LOAD_DT
    INTO    V_LAST_LOAD_DT
    FROM    BL_CL.MTA_LOADS
    WHERE   PROCEDURE_NAME = 'SP_3NF_LOAD_CE_CARD_TYPES' AND PROCEDURE_SCHEMA = 'BL_CL';
    
    IF V_LAST_LOAD_DT IS NULL THEN
        V_LAST_LOAD_DT := '1900-01-01 00:00:00';
    END IF;

    RETURN QUERY
        WITH T_MAP_CARD_TYPES_RANKED AS 
        (
            SELECT  T_MAP.*,
                    ROW_NUMBER() OVER (PARTITION BY T_MAP.CARD_TYPE_ID ORDER BY T_MAP.LOAD_DT DESC) AS LOAD_RANK
            FROM    BL_CL.T_MAP_CARD_TYPES AS T_MAP
            WHERE   T_MAP.LOAD_DT > V_LAST_LOAD_DT
        )
        SELECT  T_MAP.CARD_TYPE_ID::VARCHAR,
                T_MAP.CARD_TYPE_NAME,
                T_MAP.VERIFICATION_METHOD,
                'BL_CL'::VARCHAR,
                'T_MAP_CARD_TYPES'::VARCHAR
        FROM    T_MAP_CARD_TYPES_RANKED AS T_MAP
        WHERE   T_MAP.LOAD_RANK = 1;
END;
$$;

DROP PROCEDURE IF EXISTS BL_CL.SP_3NF_LOAD_CE_CARD_TYPES;
CREATE OR REPLACE PROCEDURE BL_CL.SP_3NF_LOAD_CE_CARD_TYPES()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_REC           RECORD;
    V_INSERTED_ROWS BIGINT := 0;
    V_UPDATED_ROWS  BIGINT := 0;
    V_TOTAL_ROWS    BIGINT := 0;
    V_AFFECTED      BIGINT := 0;
    V_EXISTS        BOOLEAN;
BEGIN
    FOR V_REC IN SELECT * FROM BL_CL.FN_3NF_TRANSFORM_CARD_TYPES() LOOP
        SELECT  EXISTS (SELECT 1 FROM BL_3NF.CE_CARD_TYPES WHERE CARD_TYPE_SRC_ID = V_REC.CARD_TYPE_ID)
        INTO    V_EXISTS;
        
        INSERT INTO BL_3NF.CE_CARD_TYPES AS TARGET (CARD_TYPE_ID, CARD_TYPE_SRC_ID, CARD_TYPE_NAME, VERIFICATION_METHOD, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
        SELECT      NEXTVAL('BL_3NF.SEQ_CARD_TYPE_ID'),
                    V_REC.CARD_TYPE_ID,
                    V_REC.CARD_TYPE_NAME,
                    V_REC.VERIFICATION_METHOD,
                    V_REC.SOURCE_SYSTEM,
                    V_REC.SOURCE_ENTITY,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP
        ON CONFLICT (CARD_TYPE_SRC_ID) DO UPDATE
        SET         CARD_TYPE_NAME = EXCLUDED.CARD_TYPE_NAME,
                    VERIFICATION_METHOD = EXCLUDED.VERIFICATION_METHOD,
                    UPDATE_DT = CURRENT_TIMESTAMP
        WHERE       TARGET.CARD_TYPE_NAME != EXCLUDED.CARD_TYPE_NAME OR
                    TARGET.VERIFICATION_METHOD != EXCLUDED.VERIFICATION_METHOD;
        
        GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
        IF V_EXISTS THEN
            V_UPDATED_ROWS := V_UPDATED_ROWS + V_AFFECTED;
        ELSE
            V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
        END IF;
        V_TOTAL_ROWS := V_TOTAL_ROWS + 1;
    END LOOP;
    
    CALL BL_CL.SP_MTA_UPDATE_LOAD('SP_3NF_LOAD_CE_CARD_TYPES', 'BL_CL');
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_CARD_TYPES', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', V_TOTAL_ROWS, V_INSERTED_ROWS, V_UPDATED_ROWS, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_CARD_TYPES', 'BL_CL', 'ERROR LOADING CE_CARD_TYPES', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING CE_CARD_TYPES (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;
COMMIT;