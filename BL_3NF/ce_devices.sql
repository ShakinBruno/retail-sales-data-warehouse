BEGIN;
CREATE SCHEMA IF NOT EXISTS BL_3NF;
CREATE SCHEMA IF NOT EXISTS BL_CL;

DROP TABLE IF EXISTS BL_3NF.CE_DEVICES;
CREATE TABLE IF NOT EXISTS BL_3NF.CE_DEVICES
(
    DEVICE_ID       BIGINT,
    DEVICE_SRC_ID   VARCHAR(255)    NOT NULL,
    DEVICE_TYPE     VARCHAR(50)     NOT NULL,
    BROWSER_USED    VARCHAR(50)     NOT NULL,
    SOURCE_SYSTEM   VARCHAR(255)    NOT NULL,
    SOURCE_ENTITY   VARCHAR(255)    NOT NULL,
    INSERT_DT       TIMESTAMP       NOT NULL,
    UPDATE_DT       TIMESTAMP       NOT NULL,
    CONSTRAINT      PK_CE_DEVICES_DEVICE_ID PRIMARY KEY (DEVICE_ID),
    CONSTRAINT      UNQ_CE_DEVICES_DEVICE_SRC_ID UNIQUE (DEVICE_SRC_ID)
);

DROP SEQUENCE IF EXISTS BL_3NF.SEQ_DEVICE_ID;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_DEVICE_ID START WITH 1 INCREMENT BY 1;

DROP PROCEDURE IF EXISTS BL_CL.SP_3NF_LOAD_CE_DEVICES_DEFAULT;
CREATE OR REPLACE PROCEDURE BL_CL.SP_3NF_LOAD_CE_DEVICES_DEFAULT()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_AFFECTED BIGINT;
BEGIN
    INSERT INTO BL_3NF.CE_DEVICES (DEVICE_ID, DEVICE_SRC_ID, DEVICE_TYPE, BROWSER_USED, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
    VALUES      (-1,
                'N/A',
                'N/A',
                'N/A',
                'MANUAL',
                'MANUAL',
                '1900-01-01 00:00:00',
                '1900-01-01 00:00:00')
    ON CONFLICT (DEVICE_ID) DO NOTHING;
    
    GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_DEVICES_DEFAULT', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', 1, V_AFFECTED, 0, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_DEVICES_DEFAULT', 'BL_CL', 'ERROR LOADING CE_DEVICES', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING CE_DEVICES (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;

DROP FUNCTION IF EXISTS BL_CL.FN_3NF_TRANSFORM_DEVICES;
CREATE OR REPLACE FUNCTION BL_CL.FN_3NF_TRANSFORM_DEVICES()
RETURNS TABLE
(
    DEVICE_ID       VARCHAR(255),
    DEVICE_TYPE     VARCHAR(50),
    BROWSER_USED    VARCHAR(50),
    SOURCE_SYSTEM   VARCHAR(255),
    SOURCE_ENTITY   VARCHAR(255)
)
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_LAST_LOAD_DT TIMESTAMP;
BEGIN
    SELECT  LAST_LOAD_DT
    INTO    V_LAST_LOAD_DT
    FROM    BL_CL.MTA_LOADS
    WHERE   PROCEDURE_NAME = 'SP_3NF_LOAD_CE_DEVICES' AND PROCEDURE_SCHEMA = 'BL_CL';
    
    IF V_LAST_LOAD_DT IS NULL THEN
        V_LAST_LOAD_DT := '1900-01-01 00:00:00';
    END IF;

    RETURN QUERY
        WITH SRC_DEVICES_RANKED AS 
        (
            SELECT  SRC.DEVICE_TYPE,
                    SRC.BROWSER_USED,
                    ROW_NUMBER() OVER (PARTITION BY CONCAT_WS('|', UPPER(TRIM(SRC.DEVICE_TYPE)), UPPER(TRIM(SRC.BROWSER_USED))) ORDER BY SRC.TIMESTAMP::TIMESTAMP DESC) AS EVENT_RANK
            FROM    SA_ONLINE.SRC_ONLINE_RETAIL_SALES AS SRC
            WHERE   COALESCE(SRC.DEVICE_TYPE, SRC.BROWSER_USED) IS NOT NULL AND
                    SRC.LOAD_DT > V_LAST_LOAD_DT
        )
        SELECT  CONCAT_WS('|', UPPER(TRIM(SRC.DEVICE_TYPE)), UPPER(TRIM(SRC.BROWSER_USED)))::VARCHAR,
                COALESCE(UPPER(TRIM(SRC.DEVICE_TYPE)), 'N/A')::VARCHAR,
                COALESCE(UPPER(TRIM(SRC.BROWSER_USED)), 'N/A')::VARCHAR,
                'SA_ONLINE'::VARCHAR,
                'SRC_ONLINE_RETAIL_SALES'::VARCHAR
        FROM    SRC_DEVICES_RANKED AS SRC
        WHERE   SRC.EVENT_RANK = 1;   
END;
$$;

DROP PROCEDURE IF EXISTS BL_CL.SP_3NF_LOAD_CE_DEVICES;
CREATE OR REPLACE PROCEDURE BL_CL.SP_3NF_LOAD_CE_DEVICES()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_REC           RECORD;
    V_INSERTED_ROWS BIGINT := 0;
    V_UPDATED_ROWS  BIGINT := 0;
    V_TOTAL_ROWS    BIGINT := 0;
    V_AFFECTED      BIGINT := 0;
    V_EXISTS        BOOLEAN;
BEGIN
    FOR V_REC IN SELECT * FROM BL_CL.FN_3NF_TRANSFORM_DEVICES() LOOP
        SELECT  EXISTS (SELECT 1 FROM BL_3NF.CE_DEVICES WHERE DEVICE_SRC_ID = V_REC.DEVICE_ID)
        INTO    V_EXISTS;
        
        INSERT INTO BL_3NF.CE_DEVICES AS TARGET (DEVICE_ID, DEVICE_SRC_ID, DEVICE_TYPE, BROWSER_USED, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
        VALUES      (NEXTVAL('BL_3NF.SEQ_DEVICE_ID'),
                    V_REC.DEVICE_ID,
                    V_REC.DEVICE_TYPE,
                    V_REC.BROWSER_USED,
                    V_REC.SOURCE_SYSTEM,
                    V_REC.SOURCE_ENTITY,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP)
        ON CONFLICT (DEVICE_SRC_ID) DO UPDATE
        SET         DEVICE_TYPE = EXCLUDED.DEVICE_TYPE,
                    BROWSER_USED = EXCLUDED.BROWSER_USED,
                    UPDATE_DT = CURRENT_TIMESTAMP
        WHERE       TARGET.DEVICE_TYPE != EXCLUDED.DEVICE_TYPE OR
                    TARGET.BROWSER_USED != EXCLUDED.BROWSER_USED;

        GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
        IF V_EXISTS THEN
            V_UPDATED_ROWS := V_UPDATED_ROWS + V_AFFECTED;
        ELSE
            V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
        END IF;
        V_TOTAL_ROWS := V_TOTAL_ROWS + 1;
    END LOOP;
    
    CALL BL_CL.SP_MTA_UPDATE_LOAD('SP_3NF_LOAD_CE_DEVICES', 'BL_CL');
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_DEVICES', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', V_TOTAL_ROWS, V_INSERTED_ROWS, V_UPDATED_ROWS, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_DEVICES', 'BL_CL', 'ERROR LOADING CE_DEVICES', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING CE_DEVICES (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;
COMMIT;