BEGIN;
CREATE SCHEMA IF NOT EXISTS BL_3NF;
CREATE SCHEMA IF NOT EXISTS BL_CL;

DROP TABLE IF EXISTS BL_3NF.CE_PAYMENT_DETAILS;
CREATE TABLE IF NOT EXISTS BL_3NF.CE_PAYMENT_DETAILS
(
    PAYMENT_DETAIL_ID       BIGINT,
    PAYMENT_DETAIL_SRC_ID   VARCHAR(255)    NOT NULL,
    PAYMENT_METHOD_ID       BIGINT          NOT NULL,
    CARD_TYPE_ID            BIGINT          NOT NULL,
    SOURCE_SYSTEM           VARCHAR(255)    NOT NULL,
    SOURCE_ENTITY           VARCHAR(255)    NOT NULL,
    INSERT_DT               TIMESTAMP       NOT NULL,
    UPDATE_DT               TIMESTAMP       NOT NULL,
    CONSTRAINT              PK_CE_PAYMENT_DETAILS_PAYMENT_DETAIL_ID PRIMARY KEY (PAYMENT_DETAIL_ID),
    CONSTRAINT              FK_CE_PAYMENT_METHODS_PAYMENT_METHOD_ID FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES BL_3NF.CE_PAYMENT_METHODS(PAYMENT_METHOD_ID),
    CONSTRAINT              FK_CE_CARD_TYPES_CARD_TYPE_ID FOREIGN KEY (CARD_TYPE_ID) REFERENCES BL_3NF.CE_CARD_TYPES(CARD_TYPE_ID),
    CONSTRAINT              UNQ_CE_PAYMENT_DETAILS_PAYMENT_DETAIL_SRC_ID UNIQUE (PAYMENT_DETAIL_SRC_ID)
);

DROP SEQUENCE IF EXISTS BL_3NF.SEQ_PAYMENT_DETAIL_ID;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_PAYMENT_DETAIL_ID START WITH 1 INCREMENT BY 1;

DROP PROCEDURE IF EXISTS BL_CL.SP_3NF_LOAD_CE_PAYMENT_DETAILS_DEFAULT;
CREATE OR REPLACE PROCEDURE BL_CL.SP_3NF_LOAD_CE_PAYMENT_DETAILS_DEFAULT()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_AFFECTED BIGINT;
BEGIN
    INSERT INTO BL_3NF.CE_PAYMENT_DETAILS (PAYMENT_DETAIL_ID, PAYMENT_DETAIL_SRC_ID, PAYMENT_METHOD_ID, CARD_TYPE_ID, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
    VALUES      (-1,
                'N/A',
                -1,
                -1,
                'MANUAL',
                'MANUAL',
                '1900-01-01 00:00:00',
                '1900-01-01 00:00:00')
    ON CONFLICT (PAYMENT_DETAIL_ID) DO NOTHING;
    
    GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_PAYMENT_DETAILS_DEFAULT', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', 1, V_AFFECTED, 0, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_PAYMENT_DETAILS_DEFAULT', 'BL_CL', 'ERROR LOADING CE_PAYMENT_DETAILS', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING CE_PAYMENT_DETAILS (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;

DROP FUNCTION IF EXISTS BL_CL.FN_3NF_TRANSFORM_PAYMENT_DETAILS;
CREATE OR REPLACE FUNCTION BL_CL.FN_3NF_TRANSFORM_PAYMENT_DETAILS()
RETURNS TABLE
(
    PAYMENT_DETAIL_ID   VARCHAR(255),
    PAYMENT_METHOD_ID   BIGINT,
    CARD_TYPE_ID        BIGINT,
    SOURCE_SYSTEM       VARCHAR(255),
    SOURCE_ENTITY       VARCHAR(255)
)
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_LAST_LOAD_DT TIMESTAMP;
BEGIN
    SELECT  LAST_LOAD_DT
    INTO    V_LAST_LOAD_DT
    FROM    BL_CL.MTA_LOADS
    WHERE   PROCEDURE_NAME = 'SP_3NF_LOAD_CE_PAYMENT_DETAILS' AND PROCEDURE_SCHEMA = 'BL_CL';
    
    IF V_LAST_LOAD_DT IS NULL THEN
        V_LAST_LOAD_DT := '1900-01-01 00:00:00';
    END IF;

    RETURN QUERY
        WITH T_MAP_PAYMENT_DETAILS_RANKED AS 
        (
            SELECT  T_MAP.*,
                    ROW_NUMBER() OVER (PARTITION BY T_MAP.PAYMENT_DETAIL_ID ORDER BY T_MAP.LOAD_DT DESC) AS LOAD_RANK
            FROM    BL_CL.T_MAP_PAYMENT_DETAILS AS T_MAP
            WHERE   T_MAP.LOAD_DT > V_LAST_LOAD_DT
        ),
        T_MAP_PAYMENT_DETAILS_LATEST AS
        (
            SELECT  T_MAP.*
            FROM    T_MAP_PAYMENT_DETAILS_RANKED AS T_MAP
            WHERE   T_MAP.LOAD_RANK = 1
        )
        SELECT          T_MAP.PAYMENT_DETAIL_ID::VARCHAR,
                        COALESCE(CE_PAY.PAYMENT_METHOD_ID, -1),
                        COALESCE(CE_CAR.CARD_TYPE_ID, -1),
                        'BL_CL'::VARCHAR,
                        'T_MAP_PAYMENT_DETAILS'::VARCHAR
        FROM            T_MAP_PAYMENT_DETAILS_LATEST    AS T_MAP
        LEFT OUTER JOIN LATERAL (SELECT * FROM BL_CL.T_MAP_PAYMENT_METHODS WHERE T_MAP.PAYMENT_METHOD_NAME = PAYMENT_METHOD_SRC_ID LIMIT 1)                             AS T_PAY ON TRUE
        LEFT OUTER JOIN LATERAL (SELECT * FROM BL_CL.T_MAP_CARD_TYPES WHERE CONCAT_WS('|', T_MAP.CARD_TYPE_NAME, T_MAP.VERIFICATION_METHOD) = CARD_TYPE_SRC_ID LIMIT 1) AS T_CAR ON TRUE
        LEFT OUTER JOIN BL_3NF.CE_PAYMENT_METHODS       AS CE_PAY ON    T_PAY.PAYMENT_METHOD_ID::VARCHAR = CE_PAY.PAYMENT_METHOD_SRC_ID
        LEFT OUTER JOIN BL_3NF.CE_CARD_TYPES            AS CE_CAR ON    T_CAR.CARD_TYPE_ID::VARCHAR = CE_CAR.CARD_TYPE_SRC_ID;
END;
$$;

DROP PROCEDURE IF EXISTS BL_CL.SP_3NF_LOAD_CE_PAYMENT_DETAILS;
CREATE OR REPLACE PROCEDURE BL_CL.SP_3NF_LOAD_CE_PAYMENT_DETAILS()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_REC           RECORD;
    V_INSERTED_ROWS BIGINT := 0;
    V_UPDATED_ROWS  BIGINT := 0;
    V_TOTAL_ROWS    BIGINT := 0;
    V_AFFECTED      BIGINT := 0;
    V_EXISTS        BOOLEAN;
BEGIN
    FOR V_REC IN SELECT * FROM BL_CL.FN_3NF_TRANSFORM_PAYMENT_DETAILS() LOOP
        SELECT  EXISTS (SELECT 1 FROM BL_3NF.CE_PAYMENT_DETAILS WHERE PAYMENT_DETAIL_SRC_ID = V_REC.PAYMENT_DETAIL_ID)
        INTO    V_EXISTS;

        INSERT INTO BL_3NF.CE_PAYMENT_DETAILS AS TARGET (PAYMENT_DETAIL_ID, PAYMENT_DETAIL_SRC_ID, PAYMENT_METHOD_ID, CARD_TYPE_ID, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
        SELECT      NEXTVAL('BL_3NF.SEQ_PAYMENT_DETAIL_ID'),
                    V_REC.PAYMENT_DETAIL_ID,
                    V_REC.PAYMENT_METHOD_ID,
                    V_REC.CARD_TYPE_ID,
                    V_REC.SOURCE_SYSTEM,
                    V_REC.SOURCE_ENTITY,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP
        ON CONFLICT (PAYMENT_DETAIL_SRC_ID) DO UPDATE
        SET         PAYMENT_METHOD_ID = EXCLUDED.PAYMENT_METHOD_ID,
                    CARD_TYPE_ID = EXCLUDED.CARD_TYPE_ID,
                    UPDATE_DT = CURRENT_TIMESTAMP
        WHERE       TARGET.PAYMENT_METHOD_ID != EXCLUDED.PAYMENT_METHOD_ID OR
                    TARGET.CARD_TYPE_ID != EXCLUDED.CARD_TYPE_ID;
        
        GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
        IF V_EXISTS THEN
            V_UPDATED_ROWS := V_UPDATED_ROWS + V_AFFECTED;
        ELSE
            V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
        END IF;
        V_TOTAL_ROWS := V_TOTAL_ROWS + 1;
    END LOOP;
    
    CALL BL_CL.SP_MTA_UPDATE_LOAD('SP_3NF_LOAD_CE_PAYMENT_DETAILS', 'BL_CL');
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_PAYMENT_DETAILS', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', V_TOTAL_ROWS, V_INSERTED_ROWS, V_UPDATED_ROWS, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_PAYMENT_DETAILS', 'BL_CL', 'ERROR LOADING CE_PAYMENT_DETAILS', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING CE_PAYMENT_DETAILS (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;
COMMIT;