BEGIN;
CREATE SCHEMA IF NOT EXISTS BL_3NF;
CREATE SCHEMA IF NOT EXISTS BL_CL;

DROP TABLE IF EXISTS BL_3NF.CE_PRODUCT_SUBCATEGORIES;
CREATE TABLE IF NOT EXISTS BL_3NF.CE_PRODUCT_SUBCATEGORIES 
(
    PRODUCT_SUBCATEGORY_ID      BIGINT,
    PRODUCT_SUBCATEGORY_SRC_ID  VARCHAR(255)    NOT NULL,
    SUBCATEGORY_NAME            VARCHAR(50)     NOT NULL,
    PRODUCT_CATEGORY_ID         BIGINT          NOT NULL,
    SOURCE_SYSTEM               VARCHAR(255)    NOT NULL,
    SOURCE_ENTITY               VARCHAR(255)    NOT NULL,
    INSERT_DT                   TIMESTAMP       NOT NULL,
    UPDATE_DT                   TIMESTAMP       NOT NULL,
    CONSTRAINT                  PK_CE_PRODUCT_SUBCATEGORIES_PRODUCT_SUBCATEGORY_ID PRIMARY KEY (PRODUCT_SUBCATEGORY_ID),
    CONSTRAINT                  FK_CE_PRODUCT_CATEGORIES_PRODUCT_CATEGORY_ID FOREIGN KEY (PRODUCT_CATEGORY_ID) REFERENCES BL_3NF.CE_PRODUCT_CATEGORIES(PRODUCT_CATEGORY_ID),
    CONSTRAINT                  UNQ_CE_PRODUCT_SUBCATEGORIES_PRODUCT_SUBCATEGORY_SRC_ID UNIQUE (PRODUCT_SUBCATEGORY_SRC_ID)
);

DROP SEQUENCE IF EXISTS BL_3NF.SEQ_PRODUCT_SUBCATEGORY_ID;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_PRODUCT_SUBCATEGORY_ID START WITH 1 INCREMENT BY 1;

DROP PROCEDURE IF EXISTS BL_CL.SP_3NF_LOAD_CE_PRODUCT_SUBCATEGORIES_DEFAULT;
CREATE OR REPLACE PROCEDURE BL_CL.SP_3NF_LOAD_CE_PRODUCT_SUBCATEGORIES_DEFAULT()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_AFFECTED BIGINT;
BEGIN
    INSERT INTO BL_3NF.CE_PRODUCT_SUBCATEGORIES (PRODUCT_SUBCATEGORY_ID, PRODUCT_SUBCATEGORY_SRC_ID, SUBCATEGORY_NAME, PRODUCT_CATEGORY_ID, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
    VALUES      (-1,
                'N/A', 
                'N/A',
                -1,
                'MANUAL',
                'MANUAL',
                '1900-01-01 00:00:00',
                '1900-01-01 00:00:00')
    ON CONFLICT (PRODUCT_SUBCATEGORY_ID) DO NOTHING;
    
    GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_PRODUCT_SUBCATEGORIES_DEFAULT', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', 1, V_AFFECTED, 0, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_PRODUCT_SUBCATEGORIES_DEFAULT', 'BL_CL', 'ERROR LOADING CE_PRODUCT_SUBCATEGORIES', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING CE_PRODUCT_SUBCATEGORIES (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;

DROP FUNCTION IF EXISTS BL_CL.FN_3NF_TRANSFORM_PRODUCT_SUBCATEGORIES;
CREATE OR REPLACE FUNCTION BL_CL.FN_3NF_TRANSFORM_PRODUCT_SUBCATEGORIES()
RETURNS TABLE
(
    PRODUCT_SUBCATEGORY_ID  VARCHAR(255),
    SUBCATEGORY_NAME        VARCHAR(50),
    PRODUCT_CATEGORY_ID     BIGINT,
    SOURCE_SYSTEM           VARCHAR(255),
    SOURCE_ENTITY           VARCHAR(255)
)
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_LAST_LOAD_DT TIMESTAMP;
BEGIN
    SELECT  LAST_LOAD_DT
    INTO    V_LAST_LOAD_DT
    FROM    BL_CL.MTA_LOADS
    WHERE   PROCEDURE_NAME = 'SP_3NF_LOAD_CE_PRODUCT_SUBCATEGORIES' AND PROCEDURE_SCHEMA = 'BL_CL';
    
    IF V_LAST_LOAD_DT IS NULL THEN
        V_LAST_LOAD_DT := '1900-01-01 00:00:00';
    END IF;

    RETURN QUERY
        WITH T_MAP_PRODUCT_SUBCATEGORIES_RANKED AS 
        (
            SELECT  T_MAP.*,
                    ROW_NUMBER() OVER (PARTITION BY T_MAP.PRODUCT_SUBCATEGORY_ID ORDER BY T_MAP.LOAD_DT DESC) AS LOAD_RANK
            FROM    BL_CL.T_MAP_PRODUCT_SUBCATEGORIES AS T_MAP
            WHERE   T_MAP.LOAD_DT > V_LAST_LOAD_DT
        ),
        T_MAP_PRODUCT_SUBCATEGORIES_LATEST AS
        (
            SELECT  T_MAP.*
            FROM    T_MAP_PRODUCT_SUBCATEGORIES_RANKED AS T_MAP
            WHERE   T_MAP.LOAD_RANK = 1
        )
        SELECT          T_MAP.PRODUCT_SUBCATEGORY_ID::VARCHAR,
                        T_MAP.SUBCATEGORY_NAME,
                        COALESCE(CE.PRODUCT_CATEGORY_ID, -1),
                        'BL_CL'::VARCHAR,
                        'T_MAP_PRODUCT_SUBCATEGORIES'::VARCHAR
        FROM            T_MAP_PRODUCT_SUBCATEGORIES_LATEST  AS T_MAP
        LEFT OUTER JOIN LATERAL (SELECT * FROM BL_CL.T_MAP_PRODUCT_CATEGORIES WHERE T_MAP.CATEGORY_NAME = CATEGORY_NAME LIMIT 1) AS T_CAT ON TRUE
        LEFT OUTER JOIN BL_3NF.CE_PRODUCT_CATEGORIES AS CE ON T_CAT.PRODUCT_CATEGORY_ID::VARCHAR = CE.PRODUCT_CATEGORY_SRC_ID;
END;
$$;

DROP PROCEDURE IF EXISTS BL_CL.SP_3NF_LOAD_CE_PRODUCT_SUBCATEGORIES;
CREATE OR REPLACE PROCEDURE BL_CL.SP_3NF_LOAD_CE_PRODUCT_SUBCATEGORIES()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_REC           RECORD;
    V_INSERTED_ROWS BIGINT := 0;
    V_UPDATED_ROWS  BIGINT := 0;
    V_TOTAL_ROWS    BIGINT := 0;
    V_AFFECTED      BIGINT := 0;
    V_EXISTS        BOOLEAN;
BEGIN
    FOR V_REC IN SELECT * FROM BL_CL.FN_3NF_TRANSFORM_PRODUCT_SUBCATEGORIES() LOOP
        SELECT  EXISTS (SELECT 1 FROM BL_3NF.CE_PRODUCT_SUBCATEGORIES WHERE PRODUCT_SUBCATEGORY_SRC_ID = V_REC.PRODUCT_SUBCATEGORY_ID)
        INTO    V_EXISTS;
        
        INSERT INTO     BL_3NF.CE_PRODUCT_SUBCATEGORIES AS TARGET (PRODUCT_SUBCATEGORY_ID, PRODUCT_SUBCATEGORY_SRC_ID, SUBCATEGORY_NAME, PRODUCT_CATEGORY_ID, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
        VALUES          (NEXTVAL('BL_3NF.SEQ_PRODUCT_SUBCATEGORY_ID'),
                        V_REC.PRODUCT_SUBCATEGORY_ID,
                        V_REC.SUBCATEGORY_NAME,
                        V_REC.PRODUCT_CATEGORY_ID,
                        V_REC.SOURCE_SYSTEM,
                        V_REC.SOURCE_ENTITY,
                        CURRENT_TIMESTAMP,
                        CURRENT_TIMESTAMP)
        ON CONFLICT     (PRODUCT_SUBCATEGORY_SRC_ID) DO UPDATE
        SET             SUBCATEGORY_NAME = EXCLUDED.SUBCATEGORY_NAME,
                        PRODUCT_CATEGORY_ID = EXCLUDED.PRODUCT_CATEGORY_ID,
                        UPDATE_DT = CURRENT_TIMESTAMP
        WHERE           TARGET.SUBCATEGORY_NAME != EXCLUDED.SUBCATEGORY_NAME OR
                        TARGET.PRODUCT_CATEGORY_ID != EXCLUDED.PRODUCT_CATEGORY_ID;

        GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
        IF V_EXISTS THEN
            V_UPDATED_ROWS := V_UPDATED_ROWS + V_AFFECTED;
        ELSE
            V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
        END IF;
        V_TOTAL_ROWS := V_TOTAL_ROWS + 1;
    END LOOP;
    
    CALL BL_CL.SP_MTA_UPDATE_LOAD('SP_3NF_LOAD_CE_PRODUCT_SUBCATEGORIES', 'BL_CL');
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_PRODUCT_SUBCATEGORIES', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', V_TOTAL_ROWS, V_INSERTED_ROWS, V_UPDATED_ROWS, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_PRODUCT_SUBCATEGORIES', 'BL_CL', 'ERROR LOADING CE_PRODUCT_SUBCATEGORIES', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING CE_PRODUCT_SUBCATEGORIES (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;
COMMIT;