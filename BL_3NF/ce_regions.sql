BEGIN;
CREATE SCHEMA IF NOT EXISTS BL_3NF;
CREATE SCHEMA IF NOT EXISTS BL_CL;

DROP TABLE IF EXISTS BL_3NF.CE_REGIONS;
CREATE TABLE IF NOT EXISTS BL_3NF.CE_REGIONS
(
    REGION_ID       BIGINT,
    REGION_SRC_ID   VARCHAR(255)    NOT NULL,
    REGION_NAME     VARCHAR(50)     NOT NULL,
    SOURCE_SYSTEM   VARCHAR(255)    NOT NULL,
    SOURCE_ENTITY   VARCHAR(255)    NOT NULL,
    INSERT_DT       TIMESTAMP       NOT NULL,
    UPDATE_DT       TIMESTAMP       NOT NULL,
    CONSTRAINT      PK_CE_REGIONS_REGION_ID PRIMARY KEY (REGION_ID),
    CONSTRAINT      UNQ_CE_REGIONS_REGION_SRC_ID UNIQUE (REGION_SRC_ID)
);

DROP SEQUENCE IF EXISTS BL_3NF.SEQ_REGION_ID;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.SEQ_REGION_ID START WITH 1 INCREMENT BY 1;

DROP PROCEDURE IF EXISTS BL_CL.SP_3NF_LOAD_CE_REGIONS_DEFAULT;
CREATE OR REPLACE PROCEDURE BL_CL.SP_3NF_LOAD_CE_REGIONS_DEFAULT()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_AFFECTED BIGINT;
BEGIN
    INSERT INTO BL_3NF.CE_REGIONS (REGION_ID, REGION_SRC_ID, REGION_NAME, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
    VALUES      (-1,
                'N/A',
                'N/A',
                'MANUAL',
                'MANUAL',
                '1900-01-01 00:00:00',
                '1900-01-01 00:00:00')
    ON CONFLICT (REGION_ID) DO NOTHING;
    
    GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_REGIONS_DEFAULT', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', 1, V_AFFECTED, 0, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_REGIONS_DEFAULT', 'BL_CL', 'ERROR LOADING CE_REGIONS', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING CE_REGIONS (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;

DROP FUNCTION IF EXISTS BL_CL.FN_3NF_TRANSFORM_REGIONS;
CREATE OR REPLACE FUNCTION BL_CL.FN_3NF_TRANSFORM_REGIONS()
RETURNS TABLE
(
    REGION_ID       VARCHAR(255),
    REGION_NAME     VARCHAR(50),
    SOURCE_SYSTEM   VARCHAR(255),
    SOURCE_ENTITY   VARCHAR(255)
)
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_LAST_LOAD_DT TIMESTAMP;
BEGIN
    SELECT  LAST_LOAD_DT
    INTO    V_LAST_LOAD_DT
    FROM    BL_CL.MTA_LOADS
    WHERE   PROCEDURE_NAME = 'SP_3NF_LOAD_CE_REGIONS' AND PROCEDURE_SCHEMA = 'BL_CL';
    
    IF V_LAST_LOAD_DT IS NULL THEN
        V_LAST_LOAD_DT := '1900-01-01 00:00:00';
    END IF;

    RETURN QUERY
        WITH SRC_REGIONS_RANKED AS 
        (
            SELECT  SRC.PURCHASE_REGION,
                    ROW_NUMBER() OVER (PARTITION BY UPPER(TRIM(SRC.PURCHASE_REGION)) ORDER BY SRC.TIMESTAMP::TIMESTAMP DESC) AS EVENT_RANK
            FROM    SA_OFFLINE.SRC_OFFLINE_RETAIL_SALES AS SRC
            WHERE   SRC.PURCHASE_REGION IS NOT NULL AND
                    SRC.LOAD_DT > V_LAST_LOAD_DT
        )
        SELECT  UPPER(TRIM(SRC.PURCHASE_REGION))::VARCHAR,
                UPPER(TRIM(SRC.PURCHASE_REGION))::VARCHAR,
                'SA_OFFLINE'::VARCHAR,
                'SRC_OFFLINE_RETAIL_SALES'::VARCHAR
        FROM    SRC_REGIONS_RANKED AS SRC
        WHERE   SRC.EVENT_RANK = 1;
END;
$$;

DROP PROCEDURE IF EXISTS BL_CL.SP_3NF_LOAD_CE_REGIONS;
CREATE OR REPLACE PROCEDURE BL_CL.SP_3NF_LOAD_CE_REGIONS()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_REC           RECORD;
    V_INSERTED_ROWS BIGINT := 0;
    V_UPDATED_ROWS  BIGINT := 0;
    V_TOTAL_ROWS    BIGINT := 0;
    V_AFFECTED      BIGINT := 0;
    V_EXISTS        BOOLEAN;
BEGIN
    FOR V_REC IN SELECT * FROM BL_CL.FN_3NF_TRANSFORM_REGIONS() LOOP
        SELECT  EXISTS (SELECT 1 FROM BL_3NF.CE_REGIONS WHERE REGION_SRC_ID = V_REC.REGION_ID)
        INTO    V_EXISTS;
        
        INSERT INTO BL_3NF.CE_REGIONS AS TARGET (REGION_ID, REGION_SRC_ID, REGION_NAME, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
        VALUES      (NEXTVAL('BL_3NF.SEQ_REGION_ID'),
                    V_REC.REGION_ID,
                    V_REC.REGION_NAME,
                    V_REC.SOURCE_SYSTEM,
                    V_REC.SOURCE_ENTITY,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP)
        ON CONFLICT (REGION_SRC_ID) DO UPDATE
        SET         REGION_NAME = EXCLUDED.REGION_NAME,
                    UPDATE_DT = CURRENT_TIMESTAMP
        WHERE       TARGET.REGION_NAME != EXCLUDED.REGION_NAME;
        
        GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
        IF V_EXISTS THEN
            V_UPDATED_ROWS := V_UPDATED_ROWS + V_AFFECTED;
        ELSE
            V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
        END IF;
        V_TOTAL_ROWS := V_TOTAL_ROWS + 1;
    END LOOP;
    
    CALL BL_CL.SP_MTA_UPDATE_LOAD('SP_3NF_LOAD_CE_REGIONS', 'BL_CL');
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_REGIONS', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', V_TOTAL_ROWS, V_INSERTED_ROWS, V_UPDATED_ROWS, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_3NF_LOAD_CE_REGIONS', 'BL_CL', 'ERROR LOADING CE_REGIONS', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING CE_REGIONS (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;
COMMIT;