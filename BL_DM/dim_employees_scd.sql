BEGIN;
CREATE SCHEMA IF NOT EXISTS BL_DM;
CREATE SCHEMA IF NOT EXISTS BL_CL;

DROP TABLE IF EXISTS BL_DM.DIM_EMPLOYEES_SCD;
CREATE TABLE IF NOT EXISTS BL_DM.DIM_EMPLOYEES_SCD
(
    EMPLOYEE_SURR_ID    BIGINT,
    EMPLOYEE_SRC_ID     VARCHAR(255)    NOT NULL,
    FIRST_NAME          VARCHAR(50)     NOT NULL,
    LAST_NAME           VARCHAR(50)     NOT NULL,
    EMAIL               VARCHAR(100)    NOT NULL,
    LOCATION_ID         BIGINT          NOT NULL,
    START_DT            TIMESTAMP       NOT NULL,
    END_DT              TIMESTAMP       NOT NULL,
    IS_ACTIVE           BOOLEAN         NOT NULL,
    SOURCE_SYSTEM       VARCHAR(255)    NOT NULL,
    SOURCE_ENTITY       VARCHAR(255)    NOT NULL,
    INSERT_DT           TIMESTAMP       NOT NULL,
    UPDATE_DT           TIMESTAMP       NOT NULL,
    CONSTRAINT          PK_DIM_EMPLOYEES_SCD_EMPLOYEE_SURR_ID PRIMARY KEY (EMPLOYEE_SURR_ID),
    CONSTRAINT          UNQ_DIM_EMPLOYEES_SCD_EMPLOYEE_SRC_ID_START_DT UNIQUE (EMPLOYEE_SRC_ID, START_DT)
);

DROP SEQUENCE IF EXISTS BL_DM.SEQ_EMPLOYEE_SURR_ID;
CREATE SEQUENCE IF NOT EXISTS BL_DM.SEQ_EMPLOYEE_SURR_ID START WITH 1 INCREMENT BY 1;

DROP PROCEDURE IF EXISTS BL_CL.SP_DM_LOAD_DIM_EMPLOYEES_SCD_DEFAULT;
CREATE OR REPLACE PROCEDURE BL_CL.SP_DM_LOAD_DIM_EMPLOYEES_SCD_DEFAULT()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_AFFECTED BIGINT;
BEGIN
    INSERT INTO BL_DM.DIM_EMPLOYEES_SCD (EMPLOYEE_SURR_ID, EMPLOYEE_SRC_ID, FIRST_NAME, LAST_NAME, EMAIL, LOCATION_ID, START_DT, END_DT, IS_ACTIVE, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
    VALUES      (-1,
                'N/A',
                'N/A',
                'N/A',
                'N/A',
                -1,
                '1900-01-01 00:00:00',
                '9999-12-31 23:59:59',
                TRUE,
                'MANUAL',
                'MANUAL',
                '1900-01-01 00:00:00',
                '1900-01-01 00:00:00')
    ON CONFLICT (EMPLOYEE_SURR_ID) DO NOTHING;
    
    GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_EMPLOYEES_SCD_DEFAULT', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', 1, V_AFFECTED, 0, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_EMPLOYEES_SCD_DEFAULT', 'BL_CL', 'ERROR LOADING DIM_EMPLOYEES_SCD', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING DIM_EMPLOYEES_SCD (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;

DROP TYPE IF EXISTS BL_DM.EMPLOYEE_SCD_TYPE CASCADE;
CREATE TYPE BL_DM.EMPLOYEE_SCD_TYPE AS
(
    EMPLOYEE_ID     VARCHAR(255),
    FIRST_NAME      VARCHAR(50),
    LAST_NAME       VARCHAR(50),
    EMAIL           VARCHAR(100),
    LOCATION_ID     BIGINT,
    START_DT        TIMESTAMP,
    END_DT          TIMESTAMP,
    IS_ACTIVE       BOOLEAN,
    SOURCE_SYSTEM   VARCHAR(255),
    SOURCE_ENTITY   VARCHAR(255)
);

DROP FUNCTION IF EXISTS BL_CL.FN_DM_TRANSFORM_DIM_EMPLOYEES_SCD;
CREATE OR REPLACE FUNCTION BL_CL.FN_DM_TRANSFORM_DIM_EMPLOYEES_SCD()
RETURNS SETOF BL_DM.EMPLOYEE_SCD_TYPE
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_LAST_LOAD_DT TIMESTAMP;
BEGIN
    SELECT  LAST_LOAD_DT
    INTO    V_LAST_LOAD_DT
    FROM    BL_CL.MTA_LOADS
    WHERE   PROCEDURE_NAME = 'SP_DM_LOAD_DIM_EMPLOYEES_SCD' AND PROCEDURE_SCHEMA = 'BL_CL';
    
    IF V_LAST_LOAD_DT IS NULL THEN
        V_LAST_LOAD_DT := '1900-01-01 00:00:00';
    END IF;

    RETURN QUERY
        SELECT          CE.EMPLOYEE_ID::VARCHAR(255),
                        CE.FIRST_NAME,
                        CE.LAST_NAME,
                        CE.EMAIL,
                        COALESCE(LOC.LOCATION_SURR_ID, -1),
                        CE.START_DT,
                        CE.END_DT,
                        CE.IS_ACTIVE,
                        'BL_3NF'::VARCHAR(255),
                        'CE_EMPLOYEES_SCD'::VARCHAR(255)
        FROM            BL_3NF.CE_EMPLOYEES_SCD AS CE
        LEFT OUTER JOIN BL_DM.DIM_LOCATIONS     AS LOC ON CE.ADDRESS_ID::VARCHAR = LOC.LOCATION_SRC_ID
        WHERE           CE.EMPLOYEE_ID > 0 AND
                        CE.UPDATE_DT > V_LAST_LOAD_DT
        ORDER BY        CE.START_DT ASC;
END;
$$;

DROP PROCEDURE IF EXISTS BL_CL.SP_DM_LOAD_DIM_EMPLOYEES_SCD;
CREATE OR REPLACE PROCEDURE BL_CL.SP_DM_LOAD_DIM_EMPLOYEES_SCD()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_EMP           BL_DM.EMPLOYEE_SCD_TYPE;
    V_CURSOR        REFCURSOR;
    V_EMPLOYEE      RECORD;
    V_EMPLOYEE_NEXT RECORD;
    V_INSERTED_ROWS BIGINT := 0;
    V_UPDATED_ROWS  BIGINT := 0;
    V_TOTAL_ROWS    BIGINT := 0;
    V_AFFECTED      BIGINT := 0;
BEGIN    
    OPEN V_CURSOR FOR SELECT * FROM BL_CL.FN_DM_TRANSFORM_DIM_EMPLOYEES_SCD();

    LOOP
        FETCH V_CURSOR INTO V_EMP;
        EXIT WHEN NOT FOUND;
        
        SELECT  *
        INTO    V_EMPLOYEE
        FROM    BL_DM.DIM_EMPLOYEES_SCD
        WHERE   EMPLOYEE_SRC_ID = V_EMP.EMPLOYEE_ID AND
                V_EMP.START_DT BETWEEN START_DT AND END_DT;
        
        SELECT      *
        INTO        V_EMPLOYEE_NEXT
        FROM        BL_DM.DIM_EMPLOYEES_SCD
        WHERE       EMPLOYEE_SRC_ID = V_EMP.EMPLOYEE_ID AND
                    START_DT > V_EMP.START_DT
        ORDER BY    START_DT ASC
        LIMIT       1; 
        
        IF V_EMPLOYEE IS NOT NULL AND (V_EMPLOYEE.FIRST_NAME != V_EMP.FIRST_NAME OR V_EMPLOYEE.LAST_NAME != V_EMP.LAST_NAME OR V_EMPLOYEE.EMAIL != V_EMP.EMAIL OR V_EMPLOYEE.LOCATION_ID != V_EMP.LOCATION_ID) THEN
            UPDATE  BL_DM.DIM_EMPLOYEES_SCD
            SET     END_DT = V_EMP.START_DT - INTERVAL '1 MINUTE',
                    IS_ACTIVE = FALSE,
                    UPDATE_DT = CURRENT_TIMESTAMP
            WHERE   EMPLOYEE_SURR_ID = V_EMPLOYEE.EMPLOYEE_SURR_ID;
            
            GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
            V_UPDATED_ROWS := V_UPDATED_ROWS + V_AFFECTED;
            
            IF V_EMPLOYEE_NEXT IS NOT NULL AND V_EMPLOYEE_NEXT.FIRST_NAME = V_EMP.FIRST_NAME AND V_EMPLOYEE_NEXT.LAST_NAME = V_EMP.LAST_NAME AND V_EMPLOYEE_NEXT.EMAIL = V_EMP.EMAIL AND V_EMPLOYEE_NEXT.LOCATION_ID = V_EMP.LOCATION_ID THEN
                UPDATE  BL_DM.DIM_EMPLOYEES_SCD
                SET     START_DT = V_EMP.START_DT,
                        UPDATE_DT = CURRENT_TIMESTAMP
                WHERE   EMPLOYEE_SURR_ID = V_EMPLOYEE_NEXT.EMPLOYEE_SURR_ID;
                
                GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
                V_UPDATED_ROWS := V_UPDATED_ROWS + V_AFFECTED;
            ELSE
                INSERT INTO BL_DM.DIM_EMPLOYEES_SCD (EMPLOYEE_SURR_ID, EMPLOYEE_SRC_ID, FIRST_NAME, LAST_NAME, EMAIL, LOCATION_ID, START_DT, END_DT, IS_ACTIVE, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
                VALUES      (NEXTVAL('BL_DM.SEQ_EMPLOYEE_SURR_ID'),
                            V_EMP.EMPLOYEE_ID,
                            V_EMP.FIRST_NAME,
                            V_EMP.LAST_NAME,
                            V_EMP.EMAIL,
                            V_EMP.LOCATION_ID, 
                            V_EMP.START_DT,
                            CASE WHEN V_EMPLOYEE_NEXT IS NULL THEN '9999-12-31 23:59:59' ELSE V_EMPLOYEE_NEXT.START_DT - INTERVAL '1 MINUTE' END,
                            CASE WHEN V_EMPLOYEE_NEXT IS NULL THEN TRUE ELSE FALSE END,
                            V_EMP.SOURCE_SYSTEM,
                            V_EMP.SOURCE_ENTITY,
                            CURRENT_TIMESTAMP,
                            CURRENT_TIMESTAMP);
            
                GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
                V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
            END IF;      
        ELSIF V_EMPLOYEE IS NULL AND V_EMPLOYEE_NEXT IS NOT NULL THEN
            IF V_EMPLOYEE_NEXT.FIRST_NAME = V_EMP.FIRST_NAME AND V_EMPLOYEE_NEXT.LAST_NAME = V_EMP.LAST_NAME AND V_EMPLOYEE_NEXT.EMAIL = V_EMP.EMAIL AND V_EMPLOYEE_NEXT.LOCATION_ID = V_EMP.LOCATION_ID THEN
                UPDATE  BL_DM.DIM_EMPLOYEES_SCD
                SET     START_DT = V_EMP.START_DT,
                        UPDATE_DT = CURRENT_TIMESTAMP
                WHERE   EMPLOYEE_SURR_ID = V_EMPLOYEE_NEXT.EMPLOYEE_SURR_ID;
                
                GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
                V_UPDATED_ROWS := V_UPDATED_ROWS + V_AFFECTED;
            ELSE
                INSERT INTO BL_DM.DIM_EMPLOYEES_SCD (EMPLOYEE_SURR_ID, EMPLOYEE_SRC_ID, FIRST_NAME, LAST_NAME, EMAIL, LOCATION_ID, START_DT, END_DT, IS_ACTIVE, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
                VALUES      (NEXTVAL('BL_DM.SEQ_EMPLOYEE_SURR_ID'),
                            V_EMP.EMPLOYEE_ID,
                            V_EMP.FIRST_NAME,
                            V_EMP.LAST_NAME,
                            V_EMP.EMAIL,
                            V_EMP.LOCATION_ID, 
                            V_EMP.START_DT,
                            V_EMPLOYEE_NEXT.START_DT - INTERVAL '1 MINUTE',
                            FALSE,
                            V_EMP.SOURCE_SYSTEM,
                            V_EMP.SOURCE_ENTITY,
                            CURRENT_TIMESTAMP,
                            CURRENT_TIMESTAMP);
            
                GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
                V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
            END IF;
        ELSIF V_EMPLOYEE IS NULL AND V_EMPLOYEE_NEXT IS NULL THEN
            INSERT INTO BL_DM.DIM_EMPLOYEES_SCD (EMPLOYEE_SURR_ID, EMPLOYEE_SRC_ID, FIRST_NAME, LAST_NAME, EMAIL, LOCATION_ID, START_DT, END_DT, IS_ACTIVE, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
            vALUES      (NEXTVAL('BL_DM.SEQ_EMPLOYEE_SURR_ID'),
                        V_EMP.EMPLOYEE_ID,
                        V_EMP.FIRST_NAME,
                        V_EMP.LAST_NAME,
                        V_EMP.EMAIL,
                        V_EMP.LOCATION_ID, 
                        V_EMP.START_DT,
                        '9999-12-31 23:59:59',
                        TRUE,
                        V_EMP.SOURCE_SYSTEM,
                        V_EMP.SOURCE_ENTITY,
                        CURRENT_TIMESTAMP,
                        CURRENT_TIMESTAMP);
    
            GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
            V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
        END IF;
        V_TOTAL_ROWS := V_TOTAL_ROWS + 1;  
    END LOOP;
    
    CLOSE V_CURSOR;
    CALL BL_CL.SP_MTA_UPDATE_LOAD('SP_DM_LOAD_DIM_EMPLOYEES_SCD', 'BL_CL');
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_EMPLOYEES_SCD', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', V_TOTAL_ROWS, V_INSERTED_ROWS, V_UPDATED_ROWS, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    BEGIN
        CLOSE V_CURSOR;
    EXCEPTION WHEN OTHERS THEN END;
    
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_EMPLOYEES_SCD', 'BL_CL', 'ERROR LOADING DIM_EMPLOYEES_SCD', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING DIM_EMPLOYEES_SCD (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;
COMMIT;