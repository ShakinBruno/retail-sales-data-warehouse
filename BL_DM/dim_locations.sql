BEGIN;
CREATE SCHEMA IF NOT EXISTS BL_DM;
CREATE SCHEMA IF NOT EXISTS BL_CL;

DROP TABLE IF EXISTS BL_DM.DIM_LOCATIONS;
CREATE TABLE IF NOT EXISTS BL_DM.DIM_LOCATIONS
(
    LOCATION_SURR_ID    BIGINT,
    LOCATION_SRC_ID     VARCHAR(255)    NOT NULL,
    ADDRESS_ID          BIGINT          NOT NULL,
    ADDRESS_NAME        VARCHAR(100)    NOT NULL,
    CITY_ID             BIGINT          NOT NULL,
    CITY_NAME           VARCHAR(50)     NOT NULL,
    COUNTRY_ID          BIGINT          NOT NULL,
    COUNTRY_NAME        VARCHAR(50)     NOT NULL,
    REGION_ID           BIGINT          NOT NULL,
    REGION_NAME         VARCHAR(50)     NOT NULL,
    SOURCE_SYSTEM       VARCHAR(255)    NOT NULL,
    SOURCE_ENTITY       VARCHAR(255)    NOT NULL,
    INSERT_DT           TIMESTAMP       NOT NULL,
    UPDATE_DT           TIMESTAMP       NOT NULL,
    CONSTRAINT          PK_DIM_LOCATIONS_LOCATION_SURR_ID PRIMARY KEY (LOCATION_SURR_ID),
    CONSTRAINT          UNQ_DIM_LOCATIONS_LOCATION_SRC_ID UNIQUE (LOCATION_SRC_ID)
);

DROP SEQUENCE IF EXISTS BL_DM.SEQ_LOCATION_SURR_ID;
CREATE SEQUENCE IF NOT EXISTS BL_DM.SEQ_LOCATION_SURR_ID START WITH 1 INCREMENT BY 1;

DROP PROCEDURE IF EXISTS BL_CL.SP_DM_LOAD_DIM_LOCATIONS_DEFAULT;
CREATE OR REPLACE PROCEDURE BL_CL.SP_DM_LOAD_DIM_LOCATIONS_DEFAULT()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_AFFECTED BIGINT;
BEGIN
    INSERT INTO BL_DM.DIM_LOCATIONS (LOCATION_SURR_ID, LOCATION_SRC_ID, ADDRESS_ID, ADDRESS_NAME, CITY_ID, CITY_NAME, COUNTRY_ID, COUNTRY_NAME, REGION_ID, REGION_NAME, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
    VALUES      (-1,
                'N/A', 
                -1,
                'N/A',
                -1,
                'N/A',
                -1,
                'N/A',
                -1,
                'N/A',
                'MANUAL',
                'MANUAL',
                '1900-01-01 00:00:00',
                '1900-01-01 00:00:00')
    ON CONFLICT (LOCATION_SURR_ID) DO NOTHING;
    
    GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_LOCATIONS_DEFAULT', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', 1, V_AFFECTED, 0, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_LOCATIONS_DEFAULT', 'BL_CL', 'ERROR LOADING DIM_LOCATIONS', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING DIM_LOCATIONS (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;

DROP TYPE IF EXISTS BL_DM.LOCATION_TYPE CASCADE;
CREATE TYPE BL_DM.LOCATION_TYPE AS
(
    LOCATION_ID     VARCHAR(255),
    ADDRESS_ID      BIGINT,
    ADDRESS_NAME    VARCHAR(100),
    CITY_ID         BIGINT,
    CITY_NAME       VARCHAR(50),
    COUNTRY_ID      BIGINT,
    COUNTRY_NAME    VARCHAR(50),
    REGION_ID       BIGINT,
    REGION_NAME     VARCHAR(50),
    SOURCE_SYSTEM   VARCHAR(255),
    SOURCE_ENTITY   VARCHAR(255)
);

DROP FUNCTION IF EXISTS BL_CL.FN_DM_TRANSFORM_LOCATIONS;
CREATE OR REPLACE FUNCTION BL_CL.FN_DM_TRANSFORM_LOCATIONS()
RETURNS SETOF BL_DM.LOCATION_TYPE
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_LAST_LOAD_DT TIMESTAMP;
BEGIN
    SELECT  LAST_LOAD_DT
    INTO    V_LAST_LOAD_DT
    FROM    BL_CL.MTA_LOADS
    WHERE   PROCEDURE_NAME = 'SP_DM_LOAD_DIM_LOCATIONS' AND PROCEDURE_SCHEMA = 'BL_CL';
    
    IF V_LAST_LOAD_DT IS NULL THEN
        V_LAST_LOAD_DT := '1900-01-01 00:00:00';
    END IF; 

    RETURN QUERY
        SELECT          CE.ADDRESS_ID::VARCHAR(255),
                        CE.ADDRESS_ID,
                        CE.ADDRESS_NAME,
                        COALESCE(CIT.CITY_ID, -1),
                        COALESCE(CIT.CITY_NAME, 'N/A')::VARCHAR(50),
                        COALESCE(COU.COUNTRY_ID, -1),
                        COALESCE(COU.COUNTRY_NAME, 'N/A')::VARCHAR(50),
                        COALESCE(REG.REGION_ID, -1),
                        COALESCE(REG.REGION_NAME, 'N/A')::VARCHAR(50),
                        'BL_3NF'::VARCHAR(255),
                        'CE_ADDRESSES'::VARCHAR(255)
        FROM            BL_3NF.CE_ADDRESSES AS CE
        LEFT OUTER JOIN BL_3NF.CE_CITIES    AS CIT ON CE.CITY_ID = CIT.CITY_ID
        LEFT OUTER JOIN BL_3NF.CE_COUNTRIES AS COU ON CIT.COUNTRY_ID = COU.COUNTRY_ID
        LEFT OUTER JOIN BL_3NF.CE_REGIONS   AS REG ON COU.REGION_ID = REG.REGION_ID
        WHERE           CE.ADDRESS_ID > 0 AND
                        CE.UPDATE_DT > V_LAST_LOAD_DT;
END;
$$;

DROP PROCEDURE IF EXISTS BL_CL.SP_DM_LOAD_DIM_LOCATIONS;
CREATE OR REPLACE PROCEDURE BL_CL.SP_DM_LOAD_DIM_LOCATIONS()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_LOCATION      BL_DM.LOCATION_TYPE;
    V_CURSOR        REFCURSOR;
    V_INSERTED_ROWS BIGINT := 0;
    V_UPDATED_ROWS  BIGINT := 0;
    V_TOTAL_ROWS    BIGINT := 0;
    V_AFFECTED      BIGINT := 0;
    V_EXISTS        BOOLEAN;
BEGIN
    OPEN V_CURSOR FOR SELECT * FROM BL_CL.FN_DM_TRANSFORM_LOCATIONS();
    
    LOOP
        FETCH V_CURSOR INTO V_LOCATION;
        EXIT WHEN NOT FOUND;
        
        SELECT  EXISTS (SELECT 1 FROM BL_DM.DIM_LOCATIONS WHERE LOCATION_SRC_ID = V_LOCATION.LOCATION_ID)
        INTO    V_EXISTS;
        
        INSERT INTO BL_DM.DIM_LOCATIONS AS TARGET (LOCATION_SURR_ID, LOCATION_SRC_ID, ADDRESS_ID, ADDRESS_NAME, CITY_ID, CITY_NAME, COUNTRY_ID, COUNTRY_NAME, REGION_ID, REGION_NAME, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
        VALUES      (NEXTVAL('BL_DM.SEQ_LOCATION_SURR_ID'),
                    V_LOCATION.LOCATION_ID,
                    V_LOCATION.ADDRESS_ID,
                    V_LOCATION.ADDRESS_NAME,
                    V_LOCATION.CITY_ID,
                    V_LOCATION.CITY_NAME,
                    V_LOCATION.COUNTRY_ID,
                    V_LOCATION.COUNTRY_NAME,
                    V_LOCATION.REGION_ID,
                    V_LOCATION.REGION_NAME,
                    V_LOCATION.SOURCE_SYSTEM,
                    V_LOCATION.SOURCE_ENTITY,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP)
        ON CONFLICT (LOCATION_SRC_ID) DO UPDATE
        SET         ADDRESS_ID = EXCLUDED.ADDRESS_ID,
                    ADDRESS_NAME = EXCLUDED.ADDRESS_NAME,
                    CITY_ID = EXCLUDED.CITY_ID,
                    CITY_NAME = EXCLUDED.CITY_NAME,
                    COUNTRY_ID = EXCLUDED.COUNTRY_ID,
                    COUNTRY_NAME = EXCLUDED.COUNTRY_NAME,
                    REGION_ID = EXCLUDED.REGION_ID,
                    REGION_NAME = EXCLUDED.REGION_NAME,
                    UPDATE_DT = CURRENT_TIMESTAMP
        WHERE       TARGET.ADDRESS_ID != EXCLUDED.ADDRESS_ID OR
                    TARGET.ADDRESS_NAME != EXCLUDED.ADDRESS_NAME OR
                    TARGET.CITY_ID != EXCLUDED.CITY_ID OR
                    TARGET.CITY_NAME != EXCLUDED.CITY_NAME OR
                    TARGET.COUNTRY_ID != EXCLUDED.COUNTRY_ID OR
                    TARGET.COUNTRY_NAME != EXCLUDED.COUNTRY_NAME OR
                    TARGET.REGION_ID != EXCLUDED.REGION_ID OR
                    TARGET.REGION_NAME != EXCLUDED.REGION_NAME;
        
        GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
        IF V_EXISTS THEN
            V_UPDATED_ROWS := V_UPDATED_ROWS + V_AFFECTED;
        ELSE
            V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
        END IF;
        V_TOTAL_ROWS := V_TOTAL_ROWS + 1;
    END LOOP;
    
    CLOSE V_CURSOR;
    CALL BL_CL.SP_MTA_UPDATE_LOAD('SP_DM_LOAD_DIM_LOCATIONS', 'BL_CL');
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_LOCATIONS', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', V_TOTAL_ROWS, V_INSERTED_ROWS, V_UPDATED_ROWS, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    BEGIN
        CLOSE V_CURSOR;
    EXCEPTION WHEN OTHERS THEN END;
    
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_LOCATIONS', 'BL_CL', 'ERROR LOADING DIM_LOCATIONS', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING DIM_LOCATIONS (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;
COMMIT;