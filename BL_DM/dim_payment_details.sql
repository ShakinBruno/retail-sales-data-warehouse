BEGIN;
CREATE SCHEMA IF NOT EXISTS BL_DM;
CREATE SCHEMA IF NOT EXISTS BL_CL;

DROP TABLE IF EXISTS BL_DM.DIM_PAYMENT_DETAILS;
CREATE TABLE IF NOT EXISTS BL_DM.DIM_PAYMENT_DETAILS
(
    PAYMENT_DETAIL_SURR_ID  BIGINT,
    PAYMENT_DETAIL_SRC_ID   VARCHAR(255)    NOT NULL,
    PAYMENT_METHOD_ID       BIGINT          NOT NULL,
    PAYMENT_METHOD_NAME     VARCHAR(50)     NOT NULL,
    CARD_TYPE_ID            BIGINT          NOT NULL,
    CARD_TYPE_NAME          VARCHAR(50)     NOT NULL,
    VERIFICATION_METHOD     VARCHAR(50)     NOT NULL,
    SOURCE_SYSTEM           VARCHAR(255)    NOT NULL,
    SOURCE_ENTITY           VARCHAR(255)    NOT NULL,
    INSERT_DT               TIMESTAMP       NOT NULL,
    UPDATE_DT               TIMESTAMP       NOT NULL,
    CONSTRAINT              PK_DIM_PAYMENT_DETAILS_PAYMENT_DETAIL_SURR_ID PRIMARY KEY (PAYMENT_DETAIL_SURR_ID),
    CONSTRAINT              UNQ_DIM_PAYMENT_DETAILS_PAYMENT_DETAIL_SRC_ID UNIQUE (PAYMENT_DETAIL_SRC_ID)
);

DROP SEQUENCE IF EXISTS BL_DM.SEQ_PAYMENT_DETAIL_SURR_ID;
CREATE SEQUENCE IF NOT EXISTS BL_DM.SEQ_PAYMENT_DETAIL_SURR_ID START WITH 1 INCREMENT BY 1;

DROP PROCEDURE IF EXISTS BL_CL.SP_DM_LOAD_DIM_PAYMENT_DETAILS_DEFAULT;
CREATE OR REPLACE PROCEDURE BL_CL.SP_DM_LOAD_DIM_PAYMENT_DETAILS_DEFAULT()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_AFFECTED BIGINT;
BEGIN
    INSERT INTO BL_DM.DIM_PAYMENT_DETAILS (PAYMENT_DETAIL_SURR_ID, PAYMENT_DETAIL_SRC_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_NAME, CARD_TYPE_ID, CARD_TYPE_NAME, VERIFICATION_METHOD, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
    VALUES      (-1,
                'N/A',
                -1,
                'N/A',
                -1,
                'N/A',
                'N/A',
                'MANUAL',
                'MANUAL',
                '1900-01-01 00:00:00',
                '1900-01-01 00:00:00')
    ON CONFLICT (PAYMENT_DETAIL_SURR_ID) DO NOTHING;
    
    GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_PAYMENT_DETAILS_DEFAULT', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', 1, V_AFFECTED, 0, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_PAYMENT_DETAILS_DEFAULT', 'BL_CL', 'ERROR LOADING DIM_PAYMENT_DETAILS', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING DIM_PAYMENT_DETAILS (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;

DROP TYPE IF EXISTS BL_DM.PAYMENT_DETAIL_TYPE CASCADE;
CREATE TYPE BL_DM.PAYMENT_DETAIL_TYPE AS
(
    PAYMENT_DETAIL_ID   VARCHAR(255),
    PAYMENT_METHOD_ID   BIGINT,
    PAYMENT_METHOD_NAME VARCHAR(50),
    CARD_TYPE_ID        BIGINT,
    CARD_TYPE_NAME      VARCHAR(50),
    VERIFICATION_METHOD VARCHAR(50),
    SOURCE_SYSTEM       VARCHAR(255),
    SOURCE_ENTITY       VARCHAR(255)
);

DROP FUNCTION IF EXISTS BL_CL.FN_DM_TRANSFORM_PAYMENT_DETAILS;
CREATE OR REPLACE FUNCTION BL_CL.FN_DM_TRANSFORM_PAYMENT_DETAILS()
RETURNS SETOF BL_DM.PAYMENT_DETAIL_TYPE
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_LAST_LOAD_DT TIMESTAMP;
BEGIN
    SELECT  LAST_LOAD_DT
    INTO    V_LAST_LOAD_DT
    FROM    BL_CL.MTA_LOADS
    WHERE   PROCEDURE_NAME = 'SP_DM_LOAD_DIM_PAYMENT_DETAILS' AND PROCEDURE_SCHEMA = 'BL_CL';
    
    IF V_LAST_LOAD_DT IS NULL THEN
        V_LAST_LOAD_DT := '1900-01-01 00:00:00';
    END IF; 

    RETURN QUERY
        SELECT          CE.PAYMENT_DETAIL_ID::VARCHAR(255),
                        COALESCE(PAY.PAYMENT_METHOD_ID, -1),
                        COALESCE(PAY.PAYMENT_METHOD_NAME, 'N/A')::VARCHAR(50),
                        COALESCE(CAR.CARD_TYPE_ID, -1),
                        COALESCE(CAR.CARD_TYPE_NAME, 'N/A')::VARCHAR(50),
                        COALESCE(CAR.VERIFICATION_METHOD, 'N/A')::VARCHAR(50),
                        'BL_3NF'::VARCHAR(255),
                        'CE_PAYMENT_DETAILS'::VARCHAR(255)
        FROM            BL_3NF.CE_PAYMENT_DETAILS   AS CE
        LEFT OUTER JOIN BL_3NF.CE_PAYMENT_METHODS   AS PAY ON CE.PAYMENT_METHOD_ID = PAY.PAYMENT_METHOD_ID
        LEFT OUTER JOIN BL_3NF.CE_CARD_TYPES        AS CAR ON CE.CARD_TYPE_ID = CAR.CARD_TYPE_ID
        WHERE           CE.PAYMENT_DETAIL_ID > 0 AND
                        CE.UPDATE_DT > V_LAST_LOAD_DT;
END;
$$;

DROP PROCEDURE IF EXISTS BL_CL.SP_DM_LOAD_DIM_PAYMENT_DETAILS;
CREATE OR REPLACE PROCEDURE BL_CL.SP_DM_LOAD_DIM_PAYMENT_DETAILS()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_PAYMENT_DETAIL    BL_DM.PAYMENT_DETAIL_TYPE;
    V_CURSOR            REFCURSOR;
    V_INSERTED_ROWS     BIGINT := 0;
    V_UPDATED_ROWS      BIGINT := 0;
    V_TOTAL_ROWS        BIGINT := 0;
    V_AFFECTED          BIGINT := 0;
    V_EXISTS        BOOLEAN;
BEGIN
    OPEN V_CURSOR FOR SELECT * FROM BL_CL.FN_DM_TRANSFORM_PAYMENT_DETAILS();
    
    LOOP
        FETCH V_CURSOR INTO V_PAYMENT_DETAIL;
        EXIT WHEN NOT FOUND;
        
        SELECT  EXISTS (SELECT 1 FROM BL_DM.DIM_PAYMENT_DETAILS WHERE PAYMENT_DETAIL_SRC_ID = V_PAYMENT_DETAIL.PAYMENT_DETAIL_ID)
        INTO    V_EXISTS;
        
        INSERT INTO BL_DM.DIM_PAYMENT_DETAILS AS TARGET (PAYMENT_DETAIL_SURR_ID, PAYMENT_DETAIL_SRC_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_NAME, CARD_TYPE_ID, CARD_TYPE_NAME, VERIFICATION_METHOD, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
        VALUES      (NEXTVAL('BL_DM.SEQ_PAYMENT_DETAIL_SURR_ID'),
                    V_PAYMENT_DETAIL.PAYMENT_DETAIL_ID,
                    V_PAYMENT_DETAIL.PAYMENT_METHOD_ID,
                    V_PAYMENT_DETAIL.PAYMENT_METHOD_NAME,
                    V_PAYMENT_DETAIL.CARD_TYPE_ID,
                    V_PAYMENT_DETAIL.CARD_TYPE_NAME,
                    V_PAYMENT_DETAIL.VERIFICATION_METHOD,
                    V_PAYMENT_DETAIL.SOURCE_SYSTEM,
                    V_PAYMENT_DETAIL.SOURCE_ENTITY,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP)
        ON CONFLICT (PAYMENT_DETAIL_SRC_ID) DO UPDATE
        SET         PAYMENT_METHOD_ID = EXCLUDED.PAYMENT_METHOD_ID,
                    PAYMENT_METHOD_NAME = EXCLUDED.PAYMENT_METHOD_NAME,
                    CARD_TYPE_ID = EXCLUDED.CARD_TYPE_ID,
                    CARD_TYPE_NAME = EXCLUDED.CARD_TYPE_NAME,
                    VERIFICATION_METHOD = EXCLUDED.VERIFICATION_METHOD,
                    UPDATE_DT = CURRENT_TIMESTAMP
        WHERE       TARGET.PAYMENT_METHOD_ID != EXCLUDED.PAYMENT_METHOD_ID OR
                    TARGET.PAYMENT_METHOD_NAME != EXCLUDED.PAYMENT_METHOD_NAME OR
                    TARGET.CARD_TYPE_ID != EXCLUDED.CARD_TYPE_ID OR
                    TARGET.CARD_TYPE_NAME != EXCLUDED.CARD_TYPE_NAME OR
                    TARGET.VERIFICATION_METHOD != EXCLUDED.VERIFICATION_METHOD;
        
        GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
        IF V_EXISTS THEN
            V_UPDATED_ROWS := V_UPDATED_ROWS + V_AFFECTED;
        ELSE
            V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
        END IF;
        V_TOTAL_ROWS := V_TOTAL_ROWS + 1;
    END LOOP;
    
    CLOSE V_CURSOR;
    CALL BL_CL.SP_MTA_UPDATE_LOAD('SP_DM_LOAD_DIM_PAYMENT_DETAILS', 'BL_CL');
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_PAYMENT_DETAILS', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', V_TOTAL_ROWS, V_INSERTED_ROWS, V_UPDATED_ROWS, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    BEGIN
        CLOSE V_CURSOR;
    EXCEPTION WHEN OTHERS THEN END;
    
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_PAYMENT_DETAILS', 'BL_CL', 'ERROR LOADING DIM_PAYMENT_DETAILS', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING DIM_PAYMENT_DETAILS (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;
COMMIT;