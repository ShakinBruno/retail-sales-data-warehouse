BEGIN;
CREATE SCHEMA IF NOT EXISTS BL_DM;
CREATE SCHEMA IF NOT EXISTS BL_CL;

DROP TABLE IF EXISTS BL_DM.DIM_PRODUCTS;
CREATE TABLE IF NOT EXISTS BL_DM.DIM_PRODUCTS 
(
    PRODUCT_SURR_ID             BIGINT,
    PRODUCT_SRC_ID              VARCHAR(255)    NOT NULL,
    PRODUCT_NAME                VARCHAR(100)    NOT NULL,
    MANUFACTURER                VARCHAR(50)     NOT NULL,
    PRODUCT_SUBCATEGORY_ID      BIGINT          NOT NULL,
    PRODUCT_SUBCATEGORY_NAME    VARCHAR(50)     NOT NULL,
    PRODUCT_CATEGORY_ID         BIGINT          NOT NULL,
    PRODUCT_CATEGORY_NAME       VARCHAR(50)     NOT NULL,
    SOURCE_SYSTEM               VARCHAR(255)    NOT NULL,
    SOURCE_ENTITY               VARCHAR(255)    NOT NULL,
    INSERT_DT                   TIMESTAMP       NOT NULL,
    UPDATE_DT                   TIMESTAMP       NOT NULL,
    CONSTRAINT                  PK_DIM_PRODUCTS_PRODUCT_SURR_ID PRIMARY KEY (PRODUCT_SURR_ID),
    CONSTRAINT                  UNQ_DIM_PRODUCTS_PRODUCT_SRC_ID UNIQUE (PRODUCT_SRC_ID)
);

DROP SEQUENCE IF EXISTS BL_DM.SEQ_PRODUCT_SURR_ID;
CREATE SEQUENCE IF NOT EXISTS BL_DM.SEQ_PRODUCT_SURR_ID START WITH 1 INCREMENT BY 1;

DROP PROCEDURE IF EXISTS BL_CL.SP_DM_LOAD_DIM_PRODUCTS_DEFAULT;
CREATE OR REPLACE PROCEDURE BL_CL.SP_DM_LOAD_DIM_PRODUCTS_DEFAULT()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_AFFECTED BIGINT;
BEGIN
    INSERT INTO BL_DM.DIM_PRODUCTS (PRODUCT_SURR_ID, PRODUCT_SRC_ID, PRODUCT_NAME, MANUFACTURER, PRODUCT_SUBCATEGORY_ID, PRODUCT_SUBCATEGORY_NAME, PRODUCT_CATEGORY_ID, PRODUCT_CATEGORY_NAME, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
    VALUES      (-1,
                'N/A', 
                'N/A',
                'N/A',
                -1,
                'N/A',
                -1,
                'N/A',
                'MANUAL',
                'MANUAL',
                '1900-01-01 00:00:00',
                '1900-01-01 00:00:00')
    ON CONFLICT (PRODUCT_SURR_ID) DO NOTHING;
    
    GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_PRODUCTS_DEFAULT', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', 1, V_AFFECTED, 0, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_PRODUCTS_DEFAULT', 'BL_CL', 'ERROR LOADING DIM_PRODUCTS', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING DIM_PRODUCTS (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;

DROP TYPE IF EXISTS BL_DM.PRODUCT_TYPE CASCADE;
CREATE TYPE BL_DM.PRODUCT_TYPE AS
(
    PRODUCT_ID          VARCHAR(255),
    PRODUCT_NAME        VARCHAR(100),
    MANUFACTURER        VARCHAR(50),
    SUBCATEGORY_ID      BIGINT,
    SUBCATEGORY_NAME    VARCHAR(50),
    CATEGORY_ID         BIGINT,
    CATEGORY_NAME       VARCHAR(50),
    SOURCE_SYSTEM       VARCHAR(255),
    SOURCE_ENTITY       VARCHAR(255)
);

DROP FUNCTION IF EXISTS BL_CL.FN_DM_TRANSFORM_PRODUCTS;
CREATE OR REPLACE FUNCTION BL_CL.FN_DM_TRANSFORM_PRODUCTS()
RETURNS SETOF BL_DM.PRODUCT_TYPE
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_LAST_LOAD_DT TIMESTAMP;
BEGIN
    SELECT  LAST_LOAD_DT
    INTO    V_LAST_LOAD_DT
    FROM    BL_CL.MTA_LOADS
    WHERE   PROCEDURE_NAME = 'SP_DM_LOAD_DIM_PRODUCTS' AND PROCEDURE_SCHEMA = 'BL_CL';
    
    IF V_LAST_LOAD_DT IS NULL THEN
        V_LAST_LOAD_DT := '1900-01-01 00:00:00';
    END IF;

    RETURN QUERY
        SELECT          CE.PRODUCT_ID::VARCHAR(255),
                        CE.PRODUCT_NAME,
                        CE.MANUFACTURER,
                        COALESCE(SUB.PRODUCT_SUBCATEGORY_ID, -1),
                        COALESCE(SUB.SUBCATEGORY_NAME, 'N/A')::VARCHAR(50),
                        COALESCE(CAT.PRODUCT_CATEGORY_ID, -1),
                        COALESCE(CAT.CATEGORY_NAME, 'N/A')::VARCHAR(50),
                        'BL_3NF'::VARCHAR(255),
                        'CE_PRODUCTS'::VARCHAR(255)
        FROM            BL_3NF.CE_PRODUCTS              AS CE
        LEFT OUTER JOIN BL_3NF.CE_PRODUCT_SUBCATEGORIES AS SUB ON CE.PRODUCT_SUBCATEGORY_ID = SUB.PRODUCT_SUBCATEGORY_ID
        LEFT OUTER JOIN BL_3NF.CE_PRODUCT_CATEGORIES    AS CAT ON SUB.PRODUCT_CATEGORY_ID = CAT.PRODUCT_CATEGORY_ID
        WHERE           CE.PRODUCT_ID > 0 AND
                        CE.UPDATE_DT > V_LAST_LOAD_DT;
END;
$$;

DROP PROCEDURE IF EXISTS BL_CL.SP_DM_LOAD_DIM_PRODUCTS;
CREATE OR REPLACE PROCEDURE BL_CL.SP_DM_LOAD_DIM_PRODUCTS()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_PRODUCT       BL_DM.PRODUCT_TYPE;
    V_CURSOR        REFCURSOR;
    V_INSERTED_ROWS BIGINT := 0;
    V_UPDATED_ROWS  BIGINT := 0;
    V_TOTAL_ROWS    BIGINT := 0;
    V_AFFECTED      BIGINT := 0;
    V_EXISTS        BOOLEAN;
BEGIN
    OPEN V_CURSOR FOR SELECT * FROM BL_CL.FN_DM_TRANSFORM_PRODUCTS();
    
    LOOP
        FETCH V_CURSOR INTO V_PRODUCT;
        EXIT WHEN NOT FOUND;
        
        SELECT  EXISTS (SELECT 1 FROM BL_DM.DIM_PRODUCTS WHERE PRODUCT_SRC_ID = V_PRODUCT.PRODUCT_ID)
        INTO    V_EXISTS;
        
        INSERT INTO BL_DM.DIM_PRODUCTS AS TARGET (PRODUCT_SURR_ID, PRODUCT_SRC_ID, PRODUCT_NAME, MANUFACTURER, PRODUCT_SUBCATEGORY_ID, PRODUCT_SUBCATEGORY_NAME, PRODUCT_CATEGORY_ID, PRODUCT_CATEGORY_NAME, SOURCE_SYSTEM, SOURCE_ENTITY, INSERT_DT, UPDATE_DT)
        VALUES      (NEXTVAL('BL_DM.SEQ_PRODUCT_SURR_ID'),
                    V_PRODUCT.PRODUCT_ID,
                    V_PRODUCT.PRODUCT_NAME,
                    V_PRODUCT.MANUFACTURER,
                    V_PRODUCT.SUBCATEGORY_ID,
                    V_PRODUCT.SUBCATEGORY_NAME,
                    V_PRODUCT.CATEGORY_ID,
                    V_PRODUCT.CATEGORY_NAME,
                    V_PRODUCT.SOURCE_SYSTEM,
                    V_PRODUCT.SOURCE_ENTITY,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP)
        ON CONFLICT (PRODUCT_SRC_ID) DO UPDATE
        SET         PRODUCT_NAME = EXCLUDED.PRODUCT_NAME,
                    MANUFACTURER = EXCLUDED.MANUFACTURER,
                    PRODUCT_SUBCATEGORY_ID = EXCLUDED.PRODUCT_SUBCATEGORY_ID,
                    PRODUCT_SUBCATEGORY_NAME = EXCLUDED.PRODUCT_SUBCATEGORY_NAME,
                    PRODUCT_CATEGORY_ID = EXCLUDED.PRODUCT_CATEGORY_ID,
                    PRODUCT_CATEGORY_NAME = EXCLUDED.PRODUCT_CATEGORY_NAME, 
                    UPDATE_DT = CURRENT_TIMESTAMP
        WHERE       TARGET.PRODUCT_NAME != EXCLUDED.PRODUCT_NAME OR
                    TARGET.MANUFACTURER != EXCLUDED.MANUFACTURER OR
                    TARGET.PRODUCT_SUBCATEGORY_ID != EXCLUDED.PRODUCT_SUBCATEGORY_ID OR
                    TARGET.PRODUCT_SUBCATEGORY_NAME != EXCLUDED.PRODUCT_SUBCATEGORY_NAME OR
                    TARGET.PRODUCT_CATEGORY_ID != EXCLUDED.PRODUCT_CATEGORY_ID OR
                    TARGET.PRODUCT_CATEGORY_NAME != EXCLUDED.PRODUCT_CATEGORY_NAME;
        
        GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
        IF V_EXISTS THEN
            V_UPDATED_ROWS := V_UPDATED_ROWS + V_AFFECTED;
        ELSE
            V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
        END IF;
        V_TOTAL_ROWS := V_TOTAL_ROWS + 1;
    END LOOP;
    
    CLOSE V_CURSOR;
    CALL BL_CL.SP_MTA_UPDATE_LOAD('SP_DM_LOAD_DIM_PRODUCTS', 'BL_CL');
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_PRODUCTS', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', V_TOTAL_ROWS, V_INSERTED_ROWS, V_UPDATED_ROWS, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    BEGIN
        CLOSE V_CURSOR;
    EXCEPTION WHEN OTHERS THEN END;
    
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_PRODUCTS', 'BL_CL', 'ERROR LOADING DIM_PRODUCTS', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING DIM_PRODUCTS (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;
COMMIT;