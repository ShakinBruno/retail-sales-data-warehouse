BEGIN;
CREATE SCHEMA IF NOT EXISTS BL_DM;
CREATE SCHEMA IF NOT EXISTS BL_CL;

DROP TABLE IF EXISTS BL_DM.DIM_TIMES;
CREATE TABLE IF NOT EXISTS BL_DM.DIM_TIMES
(
    TIME_ID             SMALLINT,
    MINUTE_VALUE        SMALLINT    NOT NULL,
    HOUR_VALUE          SMALLINT    NOT NULL,
    HOUR_NAME           VARCHAR(5)  NOT NULL,
    WORKING_HOURS_FLAG  BOOLEAN     NOT NULL,
    TIME_OF_DAY         VARCHAR(10) NOT NULL,
    CONSTRAINT          PK_DIM_TIMES_TIME_ID PRIMARY KEY (TIME_ID)
);

DROP TYPE IF EXISTS BL_DM.TIME_TYPE CASCADE;
CREATE TYPE BL_DM.TIME_TYPE AS
(
    TIME_ID             SMALLINT,
    MINUTE_VALUE        SMALLINT,
    HOUR_VALUE          SMALLINT,
    HOUR_NAME           VARCHAR(5),
    WORKING_HOURS_FLAG  BOOLEAN,
    TIME_OF_DAY         VARCHAR(10)
);

DROP FUNCTION IF EXISTS BL_CL.FN_DM_LOAD_TIMES;
CREATE OR REPLACE FUNCTION BL_CL.FN_DM_LOAD_TIMES()
RETURNS SETOF BL_DM.TIME_TYPE
LANGUAGE PLPGSQL
AS $$
BEGIN
    RETURN QUERY
        SELECT      (HOUR * 60 + MINUTE)::SMALLINT,
                    MINUTE::SMALLINT,
                    HOUR::SMALLINT,
                    CONCAT(LPAD(HOUR::VARCHAR(2), 2, '0'), ':', LPAD(MINUTE::VARCHAR(2), 2, '0'))::VARCHAR(5),
                    CASE WHEN HOUR >= 8 AND HOUR < 16 THEN TRUE ELSE FALSE END,
                    (CASE
                        WHEN HOUR >= 6 AND HOUR < 12  THEN 'MORNING'
                        WHEN HOUR >= 12 AND HOUR < 18 THEN 'AFTERNOON'
                        WHEN HOUR >= 18 AND HOUR < 24 THEN 'EVENING'
                        WHEN HOUR >= 0 AND HOUR < 6   THEN 'NIGHT'
                        ELSE 'UNKNOWN'
                    END)::VARCHAR(10)
        FROM        GENERATE_SERIES(0, 23)  AS HOUR
        CROSS JOIN  GENERATE_SERIES(0, 59)  AS MINUTE;
END;
$$;

DROP PROCEDURE IF EXISTS BL_CL.SP_DM_LOAD_DIM_TIMES;
CREATE OR REPLACE PROCEDURE BL_CL.SP_DM_LOAD_DIM_TIMES()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_TIME          BL_DM.TIME_TYPE;
    V_CURSOR        REFCURSOR;
    V_INSERTED_ROWS BIGINT := 0;
    V_TOTAL_ROWS    BIGINT := 0;
    V_AFFECTED      BIGINT := 0;
BEGIN
    OPEN V_CURSOR FOR SELECT * FROM BL_CL.FN_DM_LOAD_TIMES();
    
    LOOP
        FETCH V_CURSOR INTO V_TIME;
        EXIT WHEN NOT FOUND;
        
        INSERT INTO BL_DM.DIM_TIMES (TIME_ID, MINUTE_VALUE, HOUR_VALUE, HOUR_NAME, WORKING_HOURS_FLAG, TIME_OF_DAY)
        VALUES      (V_TIME.TIME_ID,
                    V_TIME.MINUTE_VALUE,
                    V_TIME.HOUR_VALUE,
                    V_TIME.HOUR_NAME,
                    V_TIME.WORKING_HOURS_FLAG,
                    V_TIME.TIME_OF_DAY)
        ON CONFLICT (TIME_ID) DO NOTHING;
        
        GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
        V_INSERTED_ROWS := V_INSERTED_ROWS + V_AFFECTED;
        V_TOTAL_ROWS := V_TOTAL_ROWS + 1;
    END LOOP;
    
    CLOSE V_CURSOR;
    CALL BL_CL.SP_MTA_UPDATE_LOAD('SP_DM_LOAD_DIM_TIMES', 'BL_CL');
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_TIMES', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', V_TOTAL_ROWS, V_INSERTED_ROWS, 0, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    BEGIN
        CLOSE V_CURSOR;
    EXCEPTION WHEN OTHERS THEN END;
    
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_DM_LOAD_DIM_TIMES', 'BL_CL', 'ERROR LOADING DIM_TIMES', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING DIM_TIMES (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;
COMMIT;