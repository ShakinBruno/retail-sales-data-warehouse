BEGIN;
CREATE SCHEMA IF NOT EXISTS SA_OFFLINE;
CREATE SCHEMA IF NOT EXISTS BL_CL;

DROP TABLE IF EXISTS SA_OFFLINE.SRC_OFFLINE_RETAIL_SALES;
CREATE TABLE IF NOT EXISTS SA_OFFLINE.SRC_OFFLINE_RETAIL_SALES 
(
    TRANSACTION_ID          VARCHAR(1000),
    TIMESTAMP               VARCHAR(1000),
    PRODUCT_ID              VARCHAR(1000),
    PRODUCT_NAME            VARCHAR(1000),
    PRICE                   VARCHAR(1000),
    PRODUCT_MANUFACTURER    VARCHAR(1000),
    PRODUCT_CATEGORY        VARCHAR(1000),
    PRODUCT_SUBCATEGORY     VARCHAR(1000),
    PURCHASE_REGION         VARCHAR(1000),
    PURCHASE_COUNTRY        VARCHAR(1000),
    PURCHASE_CITY           VARCHAR(1000),
    PURCHASE_ADDRESS        VARCHAR(1000),
    EMPLOYEE_ID             VARCHAR(1000),
    EMPLOYEE_FIRST_NAME     VARCHAR(1000),
    EMPLOYEE_LAST_NAME      VARCHAR(1000),
    EMPLOYEE_EMAIL          VARCHAR(1000),
    QUANTITY                VARCHAR(1000),
    DISCOUNT                VARCHAR(1000),
    TOTAL_AMOUNT            VARCHAR(1000),
    PAYMENT_METHOD          VARCHAR(1000),
    CARD_TYPE               VARCHAR(1000),
    VERIFICATION_METHOD     VARCHAR(1000),
    HASH_VALUE              CHAR(32),
    LOAD_DT                 TIMESTAMP,
    CONSTRAINT              UNQ_SRC_OFFLINE_RETAIL_SALES_HASH_VALUE UNIQUE (HASH_VALUE)
);

DROP PROCEDURE IF EXISTS BL_CL.SP_SA_OFFLINE_LOAD_SRC_OFFLINE_RETAIL_SALES;
CREATE OR REPLACE PROCEDURE BL_CL.SP_SA_OFFLINE_LOAD_SRC_OFFLINE_RETAIL_SALES()
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_TOTAL_ROWS    BIGINT;
    V_AFFECTED      BIGINT;
BEGIN
    SELECT  COUNT(*) 
    INTO    V_TOTAL_ROWS
    FROM    SA_OFFLINE.EXT_OFFLINE_RETAIL_SALES
    WHERE   TRANSACTION_ID IS NOT NULL AND TIMESTAMP IS NOT NULL;
    
    INSERT INTO SA_OFFLINE.SRC_OFFLINE_RETAIL_SALES (TRANSACTION_ID, TIMESTAMP, PRODUCT_ID, PRODUCT_NAME, PRICE, PRODUCT_MANUFACTURER, PRODUCT_CATEGORY, PRODUCT_SUBCATEGORY, PURCHASE_REGION, PURCHASE_COUNTRY, PURCHASE_CITY, PURCHASE_ADDRESS, EMPLOYEE_ID, EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, EMPLOYEE_EMAIL, QUANTITY, DISCOUNT, TOTAL_AMOUNT, PAYMENT_METHOD, CARD_TYPE, VERIFICATION_METHOD, HASH_VALUE, LOAD_DT)
    SELECT      TRANSACTION_ID,
                TIMESTAMP,
                PRODUCT_ID,
                PRODUCT_NAME,
                PRICE,
                PRODUCT_MANUFACTURER,
                PRODUCT_CATEGORY,
                PRODUCT_SUBCATEGORY,
                PURCHASE_REGION,
                PURCHASE_COUNTRY,
                PURCHASE_CITY,
                PURCHASE_ADDRESS,
                EMPLOYEE_ID,
                EMPLOYEE_FIRST_NAME,
                EMPLOYEE_LAST_NAME,
                EMPLOYEE_EMAIL,
                QUANTITY,
                DISCOUNT,
                TOTAL_AMOUNT,
                PAYMENT_METHOD,
                CARD_TYPE,
                VERIFICATION_METHOD,
                MD5(CONCAT_WS('|', TRANSACTION_ID, PRODUCT_ID, PRODUCT_NAME, PRICE, PRODUCT_MANUFACTURER, PRODUCT_CATEGORY, PRODUCT_SUBCATEGORY, PURCHASE_REGION, PURCHASE_COUNTRY, PURCHASE_CITY, PURCHASE_ADDRESS, EMPLOYEE_ID, EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, EMPLOYEE_EMAIL, QUANTITY, DISCOUNT, TOTAL_AMOUNT, PAYMENT_METHOD, CARD_TYPE, VERIFICATION_METHOD)),
                CURRENT_TIMESTAMP
    FROM        SA_OFFLINE.EXT_OFFLINE_RETAIL_SALES
    WHERE       TRANSACTION_ID IS NOT NULL AND TIMESTAMP IS NOT NULL
    ON CONFLICT (HASH_VALUE) DO NOTHING;

    GET DIAGNOSTICS V_AFFECTED = ROW_COUNT;
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_SA_OFFLINE_LOAD_SRC_OFFLINE_RETAIL_SALES', 'BL_CL', 'LOAD PERFORMED SUCCESSFULLY', V_TOTAL_ROWS, V_AFFECTED, 0, 'N/A', 'N/A');
EXCEPTION WHEN OTHERS THEN
    CALL BL_CL.SP_MTA_INSERT_LOG('SP_SA_OFFLINE_LOAD_SRC_OFFLINE_RETAIL_SALES', 'BL_CL', 'ERROR LOADING SRC_OFFLINE_RETAIL_SALES', -1, -1, -1, UPPER(SQLSTATE), UPPER(SQLERRM));
    COMMIT;
    RAISE EXCEPTION 'ERROR LOADING SRC_OFFLINE_RETAIL_SALES (%): %', UPPER(SQLSTATE), UPPER(SQLERRM);
END;
$$;
COMMIT;